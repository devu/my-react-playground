// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClassAContainer should match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ClassAContainer
    onClear={[MockFunction]}
    test="test"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Label
          pointing="below"
        >
          ClassA Container
        </Label>,
        <Grid
          columns={2}
          stackable={true}
        >
          <GridColumn>
            <ClassA
              name="Class A"
            />
          </GridColumn>
          <GridColumn>
            <ClassB
              name="Class B"
            />
          </GridColumn>
        </Grid>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "ClassA Container",
          "pointing": "below",
        },
        "ref": null,
        "rendered": "ClassA Container",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <GridColumn>
              <ClassA
                name="Class A"
              />
            </GridColumn>,
            <GridColumn>
              <ClassB
                name="Class B"
              />
            </GridColumn>,
          ],
          "columns": 2,
          "stackable": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ClassA
                name="Class A"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "name": "Class A",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ClassB
                name="Class B"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "name": "Class B",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Label
            pointing="below"
          >
            ClassA Container
          </Label>,
          <Grid
            columns={2}
            stackable={true}
          >
            <GridColumn>
              <ClassA
                name="Class A"
              />
            </GridColumn>
            <GridColumn>
              <ClassB
                name="Class B"
              />
            </GridColumn>
          </Grid>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "ClassA Container",
            "pointing": "below",
          },
          "ref": null,
          "rendered": "ClassA Container",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <GridColumn>
                <ClassA
                  name="Class A"
                />
              </GridColumn>,
              <GridColumn>
                <ClassB
                  name="Class B"
                />
              </GridColumn>,
            ],
            "columns": 2,
            "stackable": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ClassA
                  name="Class A"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "name": "Class A",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ClassB
                  name="Class B"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "name": "Class B",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
